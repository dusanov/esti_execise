package me.dusanov.esti.commhub.articles.controller;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;

import lombok.extern.slf4j.Slf4j;
import me.dusanov.esti.commhub.articles.model.Article;
import me.dusanov.esti.commhub.articles.repo.ArticleRepo;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class ArticlesControllerTest {
    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private ArticleRepo articleRepository;


    @Autowired
    private DatabaseClient databaseClient;


    private List<Article> getData(){
        return Arrays.asList( new Article(null,"title1","desc 1",0,"text 1","image 1"),
				        	  new Article(null,"title2","desc 2",0,"text 2","image 2"),
				        	  new Article(null,"title2","desc 3",0,"text 3","image 3"));
    }
    
    @BeforeEach
    public  void setup(){
        List<String> statements = Arrays.asList("DROP TABLE IF EXISTS articles;",
                "CREATE TABLE articles (\r\n" + 
                "	article_id int generated by default as identity PRIMARY KEY,\r\n" + 
                "	article_title VARCHAR (50) NOT NULL,\r\n" + 
                "	article_short_desc VARCHAR (255) NOT NULL,\r\n" + 
                "	article_type INT,\r\n" + 
                //TODO: "	article_text CLOB NOT NULL,\r\n" +
                "	article_text VARCHAR (MAX) NOT NULL,\r\n" +
                "	article_image VARCHAR (50));");

        statements.forEach(it -> databaseClient.execute(it)
                .fetch()
                .rowsUpdated()
                .block());

        articleRepository.deleteAll()
                .thenMany(Flux.fromIterable(getData()))
                .flatMap(articleRepository::save)
                .doOnNext(article ->{
                    System.out.println("Article inserted from ArticleControllerTest: " + article);
                })
                .blockLast();

    }
    
    //@Test
    //public void emptyTest(){}
    
    @Test
    public void getAllArticlesValidateCount(){
    	log.info(" === about to test get all articles ++");
        webTestClient.get().uri("/articles").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .expectBodyList(Article.class)
                .hasSize(3)
                .consumeWith(article ->{
                    List<Article> articles = article.getResponseBody();
                    articles.forEach( a ->{
                        assertTrue(a.getArticleId() != null);
                    });
                });
    }
    
    @Test
    public void getAllArticlesValidateResponse(){
        Flux<Article> userFlux = webTestClient.get().uri("/articles").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .returnResult(Article.class)
                .getResponseBody();
        StepVerifier.create(userFlux.log("Receiving values !!!"))
                .expectNextCount(3)
                .verifyComplete();

    }
    
    @Test
    public void getArticleById(){
        webTestClient.get().uri("/articles".concat("/{articleId}"),"1")
                            .exchange().expectStatus().isOk()
                            .expectBody()
                            .jsonPath("$.articleTitle").isEqualTo("title1");
    }
    
    @Test
    public void getArticleById_NotFound(){
        webTestClient.get().uri("/articles".concat("/{articleId}"),"6")
                .exchange().expectStatus().isNotFound();
    }
    
    @Test
    public void createArticle(){
        Article user = new Article(null,"titlex","desc x",0,"text x","image x");
        webTestClient.post().uri("/articles").contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                            .body(Mono.just(user),Article.class)
                            .exchange()
                            .expectStatus().isCreated()
                            .expectBody()
                            .jsonPath("$.articleId").isNotEmpty()
                            .jsonPath("$.articleTitle").isEqualTo("titlex");
    }
    
    @Test
    public void deleteArticle(){
        webTestClient.delete().uri("/articles".concat("/{articleId}"),"1")
                     .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                     .exchange()
                     .expectStatus().isOk()
                     .expectBody(Void.class);
    }
    
    @Test
    public void updateArticle(){
        String newImage = "new image";
        Article article = new Article(null,"titley","desc y",0,"text y",newImage);
        webTestClient.put().uri("/articles".concat("/{articleId}"),"1")
                        .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                        .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                        .body(Mono.just(article),Article.class)
                        .exchange()
                        .expectStatus().isOk()
                        .expectBody()
                        .jsonPath("$.articleImage").isEqualTo(newImage);
    }
    
    @Test
    public void updateArticle_notFound(){
        String newImage = "12345";
        Article article = new Article(null,"titlez","desc z",0,"text 1",newImage);
        webTestClient.put().uri("/articles".concat("/{articleId}"),"6")
                .contentType(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .accept(MediaType.valueOf(MediaType.APPLICATION_JSON_VALUE))
                .body(Mono.just(article),Article.class)
                .exchange()
                .expectStatus().isBadRequest();
    }
}
